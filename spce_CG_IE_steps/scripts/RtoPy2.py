# Smoothing the Potential Energy function generated by GP
# and generating the Force function.
# Utilizing Cubic Spline Method.
# 7/11/18 Zachary Douglas

from scipy.interpolate import interp1d
import numpy as np
from scipy.optimize import fsolve
from matplotlib import pyplot as plt
from IPython.display import display
import pandas as pd
import scipy
import math

# -----------------------------------
def w1(R,x0,delta):
    pi = math.pi
    s = (math.cos(pi*(R - x0)/(2 * delta)))**2
    return s
# -----------------------------------

InFileName = 'CGPotential.dat'
f = open(InFileName, 'r')
N = len(f.readlines())  # number of observed points.
f.close()

X = np.zeros(shape=(N,1))
Y = np.zeros(shape=(N,1))

#------------------------------------
# Open the file and read data points from the file

InFile = open(InFileName, 'r')
LineNumber = 0
for Line in InFile:
    #Remove the lin-ending characters
    Line = Line.strip('\n')
    row = Line.split()
    #Index the counter used to keep track of line number
    X[LineNumber] = float(row[0])
    Y[LineNumber] = float(row[1])
    LineNumber += 1
#After the loop is completed., close the file
InFile.close()
# -----------------------------------

bin = 0.002

xx1 = X[np.where(X > .2)]
x1  = xx1[np.where(xx1 < 1.4)]
yy1 = Y[np.where(X > .2)]
y1  = yy1[np.where(xx1 < 1.4)]

xmin = min(x1)
xmax = max(x1)

x2 = np.arange(xmax+bin,xmax+0.1,bin)
y2 = np.zeros(shape=(len(x2),1))

for i in range(len(x2)):
    y2[i] = y1[-1]*w1(x2[i],xmax,0.1)

x3 = np.arange(xmax+0.1+bin,3.5,bin)
y3 = np.zeros(shape=(len(x3),1))

x0 = np.arange(0.002,xmin-bin,bin)
a = x1[0]**12*y1[0]
y0 = (a/x0**12)

C0 = np.column_stack((x0,y0))
C1 = np.column_stack((x1,y1))
C2 = np.column_stack((x2,y2))
C3 = np.column_stack((x3,y3))

BT = np.row_stack((C0,C1,C2,C3))
Ex0 = (BT[:,0])
Ex1 = (BT[:,1])

# -----------------------------------
#Cubic Spline
#f = interp1d(Ex0,Ex1)
f2 = interp1d(Ex0,Ex1, kind='cubic')
xnew = np.linspace(0.002,3.402,num=1701,endpoint=True)
#print xnew
#plt.plot(Ex0, Ex1, 'o', xnew, f(xnew), '-', xnew, f2(xnew), '--')
#plt.axis([0, 3.5, -1.5, 3.5])
#plt.show()
# -----------------------------------
plt.scatter(X,Y,color='k')
plt.plot(Ex0,Ex1,'r-.')
plt.axis([0.2, 1.5, -2.5, 3.5])
plt.ylabel('Y')
plt.xlabel('X')
plt.title('Figure 1')
plt.show()


X = xnew
Y = f2(xnew)

dy = np.zeros(Y.shape,np.float)
dy[0:-1] = np.diff(Y)/np.diff(X)
dy[-1] = ((Y[-1] - Y[-2]))/((X[-1] - X[-2]))

plt.plot(X,-dy ,color='k')
plt.axis([0.1, 0.5, -1500, 5000])
plt.ylabel('dy')
plt.xlabel('X')
plt.title('Figure 2')
plt.show()
# -----------------------------------
OutFileName = 'table_CG_CG.xvg'
OutFile = open(OutFileName,'w')
Length = len(X)
OutputString = "%f %f %f %f %f %f %f \n" % (0,0,0,0,0,0,0)
OutFile.write(OutputString)
OutputString = "%f %f %f %f %f %f %f \n" % (0.002,0,0,0,0,0,0)
OutFile.write(OutputString)
for j in range(1,Length):
    X1 = X[j]
    Y1 = Y[j]
    d1 = dy[j]
    OutputString = "%f %f %f %f %f %f %f \n" % (X1,0,0,0,0,Y1,d1)
    #print (OutputString)
    OutFile.write(OutputString)
OutFile.close()
# -----------------------------------
